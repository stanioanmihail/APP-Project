/*
	//Allocate memory for input image
	if (rank == tasks - 1) { // Caution for last thread because it maight have a bigger chunck
		in_bitmap_data = (pixel_t*)malloc(sizeof(pixel_t) * (chunck + reminder) * width * 3);
		assert(in_bitmap_data != NULL);

		printf("[last_task]total size = %d\n", (width *  (chunck + reminder) *3 * sizeof(pixel_t)));
		
		recv_buffer = (char*)malloc(sizeof(char) * (width *  (chunck + reminder) * sizeof(pixel_t) * 3));
		assert(recv_buffer != NULL);
	} else if(rank != 0) { // Remaining processes, other than MASTER
		in_bitmap_data = (pixel_t*)malloc(sizeof(pixel_t) * chunck * width * 3);
		assert(in_bitmap_data != NULL);
		recv_buffer = (char*)malloc(sizeof(char) * (chunck * width * sizeof(pixel_t) * 3));
		assert(recv_buffer != NULL);
	} else { // Master
		recv_buffer = (char*)malloc(sizeof(char) * (chunck * width * sizeof(pixel_t) * 3));
		assert(recv_buffer != NULL);
	}

	MPI_Scatter(send_buffer, sizeof(pixel_t) * chunck * width * 3, MPI_CHAR, 
		   	    recv_buffer, sizeof(pixel_t) * chunck * width * 3, MPI_CHAR, 
		    	0, MPI_COMM_WORLD);

	if(reminder != 0){
		if(rank == 0){
			//send last chunk
		    printf("[master]start point=%d\n", chunck * tasks * width * sizeof(pixel_t) * 3);
		    printf("[master]reminder chunck=%d\n", reminder*width*sizeof(pixel_t)*3);

            MPI_Send(send_buffer + tasks * chunck * width * sizeof(pixel_t) * 3, 
					 sizeof(pixel_t) * reminder * width * 3, MPI_CHAR,
                     tasks-1, 0, MPI_COMM_WORLD);
            printf("[master] passed\n");
		}else if(rank == tasks - 1){
			//recv last chunk
			printf("[last_task]start point=%d\n", chunck * width * 3 * sizeof(pixel_t));
			printf("[last_task]reminder chunck=%d\n", reminder * width * 3 * sizeof(pixel_t));

            MPI_Recv(recv_buffer + sizeof(pixel_t) * chunck * width * 3, 
            		 sizeof(pixel_t) * reminder * width * 3, MPI_CHAR, 
            		 0, 0, MPI_COMM_WORLD, &stat);
            printf("last task after recv\n");
		}
	}
	// Copy back from recv_buffer to in_bitmap_data
	if (rank != 0 && rank != tasks-1) {
		memcpy(in_bitmap_data, recv_buffer, sizeof(pixel_t) * chunck * width * 3);
	} else if (rank == tasks-1) {
		memcpy(in_bitmap_data, recv_buffer, sizeof(pixel_t) * (chunck+reminder) * width * 3);
	}
	
	// Testing what I've done until now
	if(rank == 1) {
		int c = 0;
		for (i = 0; i < chunck; i++) {
			for (j = 0; j < width; j++) {
				printf("%.2X ", in_bitmap_data[c++]);
			}
			printf("\n");
		}
	}
	
	MPI_Gather(recv_buffer, sizeof(pixel_t) * chunck * width * 3, MPI_CHAR, out_bitmap_data, 
			sizeof(pixel_t) * chunck * width * 3, MPI_CHAR, 0, MPI_COMM_WORLD);
	*/

